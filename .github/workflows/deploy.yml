name: Deploy Bot-War API

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  NODE_VERSION: "18"
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --forceExit --detectOpenHandles

      - name: Generate coverage report
        run: npm run test:coverage -- --forceExit || npm test -- --coverage --forceExit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/bot-war-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bot-war-api:dev
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # D√©ploiement sur Fly.io (alternative)
      - name: Deploy to Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: "latest"

      - name: Check if FlyAPI token is set
        run: |
          if [ -z "${{ secrets.FLY_API_TOKEN }}" ]; then
            echo "FlyAPI secret is not set. Skipping Fly.io deployment."
            exit 1  # Si le secret n'est pas trouv√©, on arr√™te l'ex√©cution
          else
            echo "FlyAPI token is set. Proceeding with deployment."
          fi

      - name: Deploy to Fly.io
        run: |
          flyctl auth login --access-token ${{ secrets.FLY_API_TOKEN }}  # Authentifier avec le token FlyAPI
          flyctl deploy --remote-only  # D√©ployer sur Fly.io en utilisant le token

      # Notification de succ√®s
      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ D√©ploiement r√©ussi!"
          echo "‚úÖ Tests pass√©s"
          echo "üê≥ Image Docker construite"
          echo "üåê Application d√©ploy√©e"
